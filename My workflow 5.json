{
  "name": "My workflow 5",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        0,
        0
      ],
      "id": "58f975fd-1808-49ba-9924-263331fd4ed3",
      "name": "When chat message received",
      "webhookId": "32024076-d3d8-498b-a6d3-53126df153bc"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a Beauty FAQ AI Agent.\nYour job is to collect client details, understand their skincare problem, explain possible reasons, recommend products, and guide them to choose one.\nAlways be friendly and casual in tone.\n\n---\n\n### Conversation Flow\n\n1. **Ask for Email**\n   - Start by asking:  \n     \"Hey üëã before we begin, can I have your email address?\"\n\n2. **Check Email in Google Sheets**\n   - If the email exists in Google Sheets ‚Üí  \n     - Fetch the **name** from the sheet.  \n     - Greet client personally, e.g.:  \n       \"Hey Shubh üíñ, so nice to see you again! How‚Äôs it going? What skincare issue would you like help with today?\"  \n     - Skip asking for phone number.  \n\n   - If the email does NOT exist ‚Üí  \n     - Ask:  \n       \"Great! What‚Äôs your name?\"  \n       \"And can I also have your phone number so I can save your details?\"  \n\n3. **Ask the Problem**\n   - Ask:  \n     \"What‚Äôs your current skin concern? (e.g., pimples, dark circles, dryness, dullness, etc.)\"\n\n4. **Explain the Reason**\n   - Based on the client‚Äôs problem, explain possible reasons in simple, friendly language.\n\n5. **Recommend Products**\n   - Generate 3 fake but realistic skincare products dynamically. For each product, show:\n     - Product Name  \n     - Price (in $)  \n     - 2‚Äì3 Key Features/Benefits  \n\n   - Highlight ONE product as your **top recommendation** with a friendly explanation (e.g., \"This one‚Äôs my top pick because...\").  \n\n6. **Ask for Choice**\n   - Ask:  \n     \"Which product would you like to go with?\"  \n\n7. **Handle Choice & Save Data**\n   - Once the client chooses, internally prepare structured JSON with all details.  \n   - If email already existed in Google Sheets ‚Üí  \n     - Use `\"phone\": \"already have\"`.  \n   - If email is new ‚Üí  \n     - Use provided phone.  \n\n   ‚úÖ Internal JSON format (for saving only, not shown to client):\n{\n\"name\": \"Client Name\",\n\"email\": \"client@email.com\",\n\"phone\": \"1234567890\" or \"already have\",\n\"problem\": \"Client's skincare problem\",\n\"chosen_product\": {\n\"name\": \"Best Product Name\",\n\"price\": \"$XX\"\n}\n}\n\nmarkdown\nCopy code\n\n‚ö†Ô∏è Important Rule: **Never display this JSON in the chat.**  \n- Only output it internally so the automation (Google Sheets Append Row) can use it.  \n- The client should only see the friendly conversation, not the raw data.  \n\n8. **Final Step**\n- Ask:  \n  \"Do you have any other skincare questions or doubts?\"  \n- If Yes ‚Üí Repeat steps 3‚Äì7.  \n- If No ‚Üí Say:  \n  \"Thank you for chatting with me! You‚Äôre going to love your new skincare routine üíñ.\"\n\n---\n\n### Notes for Flow\n- Use **Google Sheets Lookup Row** after collecting email.  \n- If row exists ‚Üí continue with greeting using stored name.  \n- If not ‚Üí ask for name + phone.  \n- At the end ‚Üí use **Google Sheets Append Row** with the hidden JSON.  \n- JSON must **never appear in the chat conversation.**\nüëâ With this, your agent will talk naturally to users, but behind the scenes n8n will still get the JSON for saving."
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.1,
      "position": [
        208,
        0
      ],
      "id": "5fc3ac51-d5d2-4ffa-97af-0486cfc30e11",
      "name": "AI Agent"
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        224,
        208
      ],
      "id": "53a5adc0-ef0c-4229-aaff-bbdc86269ef0",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        80,
        208
      ],
      "id": "4e59d690-aa97-4107-a467-23ad563bf1ec",
      "name": "Google Gemini Chat Model",
      "credentials": {
        "googlePalmApi": {
          "id": "vqV0F7lJgajCMsYW",
          "name": "Google Gemini(PaLM) Api account 2"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI",
          "mode": "list",
          "cachedResultName": "FAQ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Name": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Name', ``, 'string') }}",
            "Email": "={{ $fromAI('Email', ``, 'string') }}",
            "Phone": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Phone', ``, 'string') }}",
            "Problem ": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Problem_', ``, 'string') }}",
            "Product": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Product', ``, 'string') }}",
            "Price": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('Price', ``, 'string') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Name",
              "displayName": "Name",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Email",
              "displayName": "Email",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Phone",
              "displayName": "Phone",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Problem ",
              "displayName": "Problem ",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Product",
              "displayName": "Product",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Price",
              "displayName": "Price",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        368,
        208
      ],
      "id": "6e6de76c-970c-4d5c-bf31-76ac28ac75ad",
      "name": "Append row",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "9ICCSETStHE0XFyY",
          "name": "Google Sheets account 2"
        }
      }
    },
    {
      "parameters": {
        "descriptionType": "manual",
        "toolDescription": "Retrieves existing user information from the leads Google Sheet. Use this to check if a user already exists¬†in¬†the¬†system.",
        "documentId": {
          "__rl": true,
          "value": "1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI",
          "mode": "list",
          "cachedResultName": "FAQ",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "Sheet1",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1DhnfXkMJpUXXDCg4mxtlt1eNe6LulFLjLFDKXjJuzeI/edit#gid=0"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheetsTool",
      "typeVersion": 4.6,
      "position": [
        496,
        208
      ],
      "id": "10f1a1c8-bf4c-4a67-8484-41294e92a185",
      "name": "Get row(s) in sheet in Google Sheets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "9ICCSETStHE0XFyY",
          "name": "Google Sheets account 2"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        []
      ]
    },
    "Append row": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Get row(s) in sheet in Google Sheets": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0f39c501-b6ab-4d3a-94e3-92c632f19c22",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "ad49dd1ad62a8abd5335dea04122d3be59a8b19ed44c6013b841467cc2d7c313"
  },
  "id": "qx1G5ncNiLDZxGR4",
  "tags": []
}